package de.ifgi.envision.eps.push;

import java.io.IOException;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Random;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.log4j.Logger;
import org.joda.time.Interval;
import org.openrdf.model.BNode;
import org.openrdf.model.Resource;
import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.Value;
import org.openrdf.model.ValueFactory;
import org.openrdf.model.vocabulary.OWL;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.Repository;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.RepositoryException;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.rio.RDFFormat;
import org.openrdf.rio.RDFHandlerException;
import org.openrdf.rio.RDFWriter;
import org.openrdf.rio.RDFWriterFactory;
import org.openrdf.rio.Rio;
import org.openrdf.rio.n3.N3Writer;
import org.openrdf.sail.memory.MemoryStore;

import com.vividsolutions.jts.geom.Geometry;


public class MessageBuilder {
	// namespaces
	public static String NS_BASE = "http://purl.org/ifgi/eo-instance#";
	public static String NS_TIME = "http://purl.org/ifgi/time#";
	public static String NS_DC = "http://purl.org/dc/elements/1.1/#";
	public static String NS_EO = "http://purl.org/ifgi/event-observation#";
	public static String NS_FLOOD = "http://purl.org/ifgi/water/flood#"; 
	public static String NS_SSN = "http://purl.org/ifgi/ssn#"; 
	public static String NS_DUL = "http://purl.org/ifgi/dul#";
	public static String NS_GEOSPARQL = "http://purl.org/ifgi/geosparql#"; 
	public static String NS_GS = "http://purl.org/ifgi/geospace#";
	public static String NS_ANNOT = "http://purl.org/ifgi/annotations#";
	public static String NS_GD = "http://purl.org/ifgi/geodesc#";
	public static String NS_GML = "http://purl.org/ifgi/gml/0.2#";
	public static String NS_OM = "http://purl.org/ifgi/om#";
	
	private Repository repo;
	private ValueFactory vf;
	
	private List<Statement> stack = new ArrayList<Statement>(); 
	
	private static org.apache.log4j.Logger log = Logger.getLogger(MessageBuilder.class);
	
	
	public MessageBuilder() throws RepositoryException {
		repo = new SailRepository(new MemoryStore());
		repo.initialize();
		vf = repo.getValueFactory();
	}

	/*
	 * This version of the method includes the event pattern that triggered the detection. 
	 * Therefore, it will be only callable from listeners that implement the interface StatementAwareUpdateListener.
	 */
	public String createRDFMessage(Geometry geometry, Interval temporalLocation, String observedProperty, String eventType, String eventPattern, String source, String url) {
		/*
		 *  Importing ontologies
		 */
		BNode owlOntology = vf.createBNode();
		stackStatement(owlOntology, RDF.TYPE, OWL.ONTOLOGY);
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_DUL));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_TIME));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_EO));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_FLOOD));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_SSN));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_GEOSPARQL));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_GD));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_ANNOT));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_GML));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_OM));
		
		/*
		 * Instances
		 */
		// eo:EventObservation instance
		URI eventObservation = vf.createURI(NS_BASE, "eventObservation_"+RandomStringUtils.random(6, true, false));
//		BNode eventObservation = vf.createBNode();
		stackStatement(eventObservation, RDF.TYPE, vf.createURI(NS_EO, "EventObservation")); 
			
		// gd:ObservationDescription instance
		//BNode observationDesc = vf.createBNode();
		URI observationDesc = vf.createURI(NS_BASE, "observationDesc_"+RandomStringUtils.random(6, true, false));
		stackStatement(observationDesc, RDF.TYPE, vf.createURI(NS_GD, "ObservationDescription"));
		
		// om:ObservationCollection instance + literal
		//BNode observationCollection = vf.createBNode();
		URI observationCollection = vf.createURI(NS_BASE, "observationCollection_"+RandomStringUtils.random(6, true, false));
		stackStatement(observationCollection, RDF.TYPE, vf.createURI(NS_OM, "ObservationCollection"));
		//stackStatement(observationCollection, vf.createURI(NS_DUL, "hasDataValue"), vf.createLiteral(source));
		stackStatement(observationCollection, vf.createURI("http://purl.org/ifgi/provenance#", "request"), vf.createLiteral(source));
		stackStatement(observationCollection, vf.createURI("http://purl.org/ifgi/provenance#", "hasURL"), vf.createLiteral(url));
		
		// eo:EventObservationType instance
		//BNode eventObservationType = vf.createBNode();
		URI eventObservationType = vf.createURI(NS_BASE, "eventObservationType_"+RandomStringUtils.random(6, true, false));
		stackStatement(eventObservationType, RDF.TYPE, vf.createURI(eventType));
		
		// eo:EventObservationRule instance + literal
		//BNode eventObservationRule = vf.createBNode();
		URI eventObservationRule = vf.createURI(NS_BASE, "eventObservationRule_"+RandomStringUtils.random(6, true, false));
		stackStatement(eventObservationRule, RDF.TYPE, vf.createURI(NS_EO, "EventObservationRule"));
		stackStatement(eventObservationRule, vf.createURI(NS_DUL, "hasDataValue"), vf.createLiteral(eventPattern));
		
		/**
		 *  If we assume that the Sensor Data Services are semantically annotated, we could directly use the observed property of the
		 *  observations analyzed to create the triple, but this is not often the case.
		 *  
		 *  flood:WaterLevel or flood:WaterDischarge instance
		 */
		//BNode observedPropertyInstance = vf.createBNode();
		URI observedPropertyInstance = vf.createURI(NS_BASE, "observedPropertyInstance_"+RandomStringUtils.random(6, true, false));
		if (observedProperty.equalsIgnoreCase("urn:ogc:def:phenomenon:OGC:1.0.30:waterlevel")) {
			stackStatement(observedPropertyInstance, RDF.TYPE, vf.createURI(NS_FLOOD, "WaterLevel"));
		}
		else if (observedProperty.equalsIgnoreCase("urn:ogc:def:phenomenon:OGC:1.0.30:waterflow")) {
			stackStatement(observedPropertyInstance, RDF.TYPE, vf.createURI(NS_FLOOD, "WaterDischarge"));
		}
		
		// geosparql:Geometry instance
		//BNode geometryInstance = vf.createBNode();
		URI geometryInstance = vf.createURI(NS_BASE, "geometryInstance_"+RandomStringUtils.random(6, true, false));
		stackStatement(geometryInstance, RDF.TYPE, vf.createURI(NS_GEOSPARQL, "Geometry"));
		
		// time:Instant instance
		//BNode timeInstance = vf.createBNode();
		URI timeInstance = vf.createURI(NS_BASE, "timeInstance_"+RandomStringUtils.random(6, true, false));
		stackStatement(timeInstance, RDF.TYPE, vf.createURI(NS_TIME, "Instant"));
		
		
		/*
		 * Properties
		 */
		stackStatement(timeInstance, vf.createURI(NS_TIME, "inXSDDateTime"), vf.createLiteral(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z").format(temporalLocation.getEnd().toDate())));
		
		String location = "SRID=" + geometry.getSRID() + ";" + geometry.toString();
		stackStatement(geometryInstance, vf.createURI(NS_GEOSPARQL, "asWKT"), vf.createLiteral(location));
		
		stackStatement(observationDesc, vf.createURI(NS_ANNOT, "domainReference"), eventObservation);
		stackStatement(observationDesc, vf.createURI(NS_GD, "derivedFrom"), observationCollection);
		stackStatement(observationDesc, vf.createURI(NS_GEOSPARQL, "hasGeometry"), geometryInstance);
		stackStatement(observationDesc, vf.createURI(NS_GML, "startTime"), timeInstance);
		
		stackStatement(eventObservation, vf.createURI(NS_SSN, "observedProperty"), observedPropertyInstance);
		stackStatement(eventObservation, vf.createURI(NS_DUL, "isClassifiedBy"), eventObservationType);
		stackStatement(eventObservation, vf.createURI(NS_DUL, "satisfies"), eventObservationRule);
		
		stackStatement(eventObservationType, vf.createURI(NS_DUL, "isDefinedIn"), eventObservationRule);
		
		
		RepositoryConnection connection = null;
		StringWriter sw = null;
		N3Writer n3Writer = null;
		//RDFWriter rdfWriter = null;
		String str = null;
		try {
			connection = repo.getConnection();
			connection.add(stack);
			sw = new StringWriter();
			n3Writer = new N3Writer(sw); 
			handleNamespaces(n3Writer);
			//rdfWriter = Rio.createWriter(RDFFormat.RDFXML, sw);
			connection.export(n3Writer);
			str = sw.toString();
			sw.close();
			connection.close();
		} catch (RepositoryException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (RDFHandlerException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return str;
	}
	
	
	private void handleNamespaces(N3Writer n3Writer) {
		try {
			n3Writer.handleNamespace("dul", NS_DUL);
			n3Writer.handleNamespace("time", NS_TIME);
			n3Writer.handleNamespace("evob", NS_EO);
			n3Writer.handleNamespace("flood", NS_FLOOD);
			n3Writer.handleNamespace("ssn", NS_SSN);
			n3Writer.handleNamespace("geo", NS_GEOSPARQL);
			n3Writer.handleNamespace("gd", NS_GD);
			n3Writer.handleNamespace("annot", NS_ANNOT);
			n3Writer.handleNamespace("gml", NS_GML);
			n3Writer.handleNamespace("om", NS_OM);
		} catch (RDFHandlerException e) {
			e.printStackTrace();
		}
	}

	
	@Deprecated
	public String createRDFMessage(Geometry geometry, Date date, String observedProperty, String eventType) {
		// Classes
		BNode owlOntology = vf.createBNode();
		stackStatement(owlOntology, RDF.TYPE, OWL.ONTOLOGY);
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_DUL));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_TIME));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_EO));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_FLOOD));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_SSN));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_GEOSPARQL));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_GD));
		stackStatement(owlOntology, OWL.IMPORTS, vf.createURI(NS_ANNOT));
		
		BNode eventObservation = vf.createBNode();
		stackStatement(eventObservation, RDF.TYPE, vf.createURI(NS_EO, "EventObservation")); 
			
		BNode eventObservationDesc = vf.createBNode();
		stackStatement(eventObservationDesc, RDF.TYPE, vf.createURI(NS_GD, "ObservationDescription"));
		
		// Each subscriber must define the event type that is being detected
		BNode eventObservationType = vf.createBNode();
		stackStatement(eventObservationType, RDF.TYPE, vf.createURI(eventType));
		
		/**
		 *  If we assume that the Sensor Data Services are semantically annotated, we can directly use the observed property of the
		 *  observations analyzed to create the triple. In this version of the code, the event property will be somehow "hard-coded".
		 */
		BNode prop = vf.createBNode();
		stackStatement(prop, RDF.TYPE, vf.createURI(NS_FLOOD, "WaterLevel"));
		
		BNode locationDescription = vf.createBNode();
		stackStatement(locationDescription, RDF.TYPE, vf.createURI(NS_GD, "LocationDescription"));
		
		
		// Relations
		stackStatement(eventObservationDesc, vf.createURI(NS_DUL, "describes"), eventObservation);
		stackStatement(eventObservationDesc, vf.createURI(NS_GD, "describedLocation"), locationDescription);
		
		stackStatement(eventObservation, vf.createURI(NS_SSN, "observedProperty"), prop);
		stackStatement(eventObservation, vf.createURI(NS_DUL, "isClassifiedBy"), eventObservationType);
		
		String location = "SRID:" + geometry.getSRID() + ";" + geometry.toString();
		stackStatement(locationDescription, vf.createURI(NS_GEOSPARQL, "asWKT"), vf.createLiteral(location));
		stackStatement(locationDescription, vf.createURI(NS_TIME, "inXSDDateTime"), vf.createLiteral(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm").format(date)));
		
		RepositoryConnection connection = null;
		StringWriter sw = null;
		N3Writer n3Writer = null;
		//RDFWriter rdfWriter = null;
		String str = null;
		try {
			connection = repo.getConnection();
			connection.add(stack);
			sw = new StringWriter();
			n3Writer = new N3Writer(sw); 
			//rdfWriter = Rio.createWriter(RDFFormat.RDFXML, sw);
			connection.export(n3Writer);
			str = sw.toString();
			sw.close();
			connection.close();
		} catch (RepositoryException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (RDFHandlerException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return str;
	}
	
	private void stackStatement(Resource subject, URI predicate, Value object) {
		stack.add(vf.createStatement(subject, predicate, object));  
	}

}
